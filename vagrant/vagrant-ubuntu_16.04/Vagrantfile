# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "bento/ubuntu-16.04"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  config.vm.network "private_network", ip: "192.168.102.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  config.vm.synced_folder "D:/workspace", "/workspace"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", inline: <<-SHELL

    # MySQL
    DBUSER=vagrant
    DBPASSWD=111111
    debconf-set-selections <<< "mysql-server mysql-server/root_password password $DBPASSWD"
    debconf-set-selections <<< "mysql-server mysql-server/root_password_again password $DBPASSWD"

    # RabbitMQ
    echo "deb http://www.rabbitmq.com/debian/ testing main" >> /etc/apt/sources.list
    wget http://www.rabbitmq.com/rabbitmq-signing-key-public.asc
    apt-key add rabbitmq-signing-key-public.asc

    # Redis
    add-apt-repository -y ppa:chris-lea/redis-server
    
    # PHP 7.1
    apt-get install -y python-software-properties
    add-apt-repository -y ppa:ondrej/php

    apt-get update

    apt-get install -y nginx
    apt-get install -y mysql-server
    apt-get install -y --allow-unauthenticated rabbitmq-server
    apt-get install -y redis-server

    # Python
    apt-get -y install python-pip
    pip install --upgrade pip
    pip install virtualenv
    mkdir /venvs
    cd /venvs
    virtualenv --python=/usr/bin/python3 default

    # PHP 7.1
    #apt-get install -y php7.1
    apt-get install -y php7.1-dev php7.1-fpm php7.1-cli php7.1-common php7.1-mysql php7.1-sqlite3 php7.1-bcmath php7.1-xml php7.1-mbstring php7.1-opcache php7.1-json php7.1-curl php7.1-imap php7.1-intl php7.1-soap php7.1-mcrypt php7.1-gd php7.1-zip

    # Composer
    php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
    php composer-setup.php
    php -r "unlink('composer-setup.php');"
    mv composer.phar /usr/local/bin/composer
    
    # Alter binding config for MySQL, Redis
    echo "\nUpdating MySQL binding...\n"
    sed -i "s/.*bind-address.*/bind-address = 0.0.0.0/" /etc/mysql/mysql.conf.d/mysqld.cnf
    systemctl restart mysql
    
    echo "\nUpdating Redis binding...\n"
    sed -i "s/^bind .*/bind 0.0.0.0/" /etc/redis/redis.conf
    systemctl restart redis
    
    echo -e "\nCreating MySQL user...\n"
    mysql -uroot -p$DBPASSWD -e "CREATE USER '$DBUSER'@'%' IDENTIFIED BY '$DBPASSWD';" >> /vagrant/vm_build.log 2>&1
    mysql -uroot -p$DBPASSWD -e "GRANT ALL PRIVILEGES ON *.* TO '$DBUSER'@'%' WITH GRANT OPTION;" > /vagrant/vm_build.log 2>&1

  SHELL
end
