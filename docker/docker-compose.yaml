version: "3.9"

services:
  go-dev-container:
    container_name: go-dev-container
    build:
      context: .
      dockerfile: go-dev-container.Dockerfile
      network: host

  nginx:
    image: nginx:stable
    container_name: nginx
    command: ["nginx-debug", "-g", "daemon off;"]
    network_mode: "host"
    # ports:
    #   - "80:80"
    #   - "443:443"
    #   - "10080:10080"
    volumes:
      - ${HOME}/docker-volumes/nginx-data:/etc/nginx
    # networks:
    #   - myhost

  certbot:
    image: certbot/certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot

  mariadb:
    image: mariadb:lts
    container_name: maria-db
    command: --default-authentication-plugin=mysql_native_password --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    restart: on-failure
    networks:
      - mybridge
    environment:
      MARIADB_ROOT_PASSWORD: mariadb
      MARIADB_DATABASE: default_db
      MARIADB_USER: mariadb_user
      MARIADB_PASSWORD: mariadb_pw
    volumes:
      - ~/docker-volumes/mariadb:/var/lib/mysql
    ports:
      - "3307:3306"
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "127.0.0.1" ]
      interval: 30s
      timeout: 10s
      retries: 5

  mysql:
    image: mysql:8.0
    container_name: mysql-db
    command: --default-authentication-plugin=mysql_native_password --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    restart: on-failure
    networks:
      - mybridge
    environment:
      MYSQL_ROOT_PASSWORD: mysql
      MYSQL_DATABASE: default_db
      MYSQL_USER: admin-user
      MYSQL_PASSWORD: mysql
    volumes:
      - ${HOME}/docker-volumes/mysql:/var/lib/mysql
    ports:
      - "3306:3306"
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "127.0.0.1"]
      interval: 30s
      timeout: 10s
      retries: 5

  postgresql:
    image: postgres:15.1
    container_name: postgre-db
    restart: on-failure
    command: ["postgres", "-c", "log_statement=all"]
    networks:
      - mybridge
    volumes:
      - ${HOME}/docker-volumes/postgresql-data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: postgre_user
      POSTGRES_PASSWORD: postgre_pw
      POSTGRES_DB: default_db
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 30s
      retries: 5
      start_period: 80s

  cassandra:
    image: cassandra:4.1.1
    container_name: cassandra
    restart: on-failure
    environment:
      CASSANDRA_SEEDS: cassandra
      CASSANDRA_CLUSTER_NAME: docker-cassandra-cluster
      CASSANDRA_AUTHENTICATOR: PasswordAuthenticator
      CASSANDRA_SUPERUSER_USER_NAME: root
      CASSANDRA_SUPERUSER_PASSWORD: cassandra
    networks:
      - mybridge
    ports:
      - 9042:9042
    volumes:
      - ${HOME}/docker-volumes/cassandra-data:/var/lib/cassandra
    healthcheck:
      test: ["CMD-SHELL", "nodetool status"]
      interval: 30s
      timeout: 10s
      retries: 5

  redis:
    image: "redis:latest"
    container_name: redis-db
    environment:
      - REDIS_REPLICATION_MODE=master
      - ALLOW_EMPTY_PASSWORD=yes
    ports:
      - "6379:6379"
    networks:
      - mybridge
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 3s
      retries: 30

  mongodb:
    image: mongo
    container_name: mongo-db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=mongodb
    volumes:
      - ${HOME}/docker-volumes/mongodb-data:/data/db
    ports:
      - "27017:27017"
    networks:
      - mybridge
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo mongo-db:27017 --quiet
      interval: 30s
      timeout: 10s
      retries: 5

  kafka:
    image: "bitnami/kafka:latest"
    platform: linux/amd64
    ports:
      - "9092:9092"
    environment:
      KAFKA_ENABLE_KRAFT: yes
      KAFKA_CFG_PROCESS_ROLES: broker,controller
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://127.0.0.1:9092
      KAFKA_BROKER_ID: 1
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@127.0.0.1:9093
      ALLOW_PLAINTEXT_LISTENER: yes
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: true
    volumes:
      - ${HOME}/docker-volumes/kafka/data:/bitnami/kafka
    networks:
      - mybridge

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
    ports:
      - "9081:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: "kafka:9092"

  qdrant:
    # Dashboard: http://localhost:6333/dashboard
    image: qdrant/qdrant
    container_name: qdrant-db
    restart: on-failure
    networks:
      - mybridge
    volumes:
      - ~/docker-volumes/qdrant:/qdrant/storage
    ports:
      - "6333:6333"
      - "6334:6334"
    environment:
      QDRANT__LOG_LEVEL: INFO
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__ENABLE_TLS: 0

networks:
  myhost:
    driver: host
  mybridge:
    driver: bridge
